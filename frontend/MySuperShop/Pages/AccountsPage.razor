@page "/account/all"
@using System.Net.Http.Json
@using MudBlazor
@using MySuperShop.HttpApiClient
@inject IMyShopClient Client
@inject ISnackbar Snackbar

<MudTable Items="@Accounts" Dense="false" Hover="true" ReadOnly="@ronly" CanCancelEdit="true" Filter="new Func<Account,bool>(FilterFunc)"
          @bind-SelectedItem="selectedItem1" SortLabel="Sort By" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          IsEditRowSwitchingBlocked="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
        <col style="width:50px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Account, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Account, object>(x=>x.Email)">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Account, object>(x=>x.HashedPassword)">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Account, object>(x=>x.Roles)">Mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Password">@context.HashedPassword</MudTd>
        <MudTd DataLabel="Roles">@context.Roles</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Email">
            <MudTextField @bind-Value="@context.Email" Required />
        </MudTd>
        <MudTd DataLabel="Password">
            <MudTextField @bind-Value="@context.HashedPassword" Required />
        </MudTd>
        <MudTd DataLabel="Roles(Customer/Manager/Admin)">
            <MudTextField @bind-Value="@context.Roles" Required Min="1" />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" />
    </EditButtonContent>
</MudTable>

<MudSwitch @bind-Checked="@ronly" Color="Color.Tertiary">Read Only</MudSwitch>
@code {
    private bool dense = false;
    private bool hover = true;
    private bool ronly = true;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private Account selectedItem1 = null;
    private Account accountBeforeEdit;
    private HashSet<Account> selectedItems1 = new HashSet<Account>();
    private IEnumerable<Account> Accounts = new List<Account>();

    protected override async Task OnInitializedAsync()
    {
        Accounts = await Client.GetAccounts();
    }

    private void BackupItem(object element)
    {
        accountBeforeEdit = new()
            {
                Name = ((Account)element).Name,
                Email = ((Account)element).Email,
                HashedPassword = ((Account)element).HashedPassword,
                Roles = ((Account)element).Roles
            };
    }

    private void ResetItemToOriginalValues(object account)
    {
        ((Account)account).Name = accountBeforeEdit.Name;
        ((Account)account).Email = accountBeforeEdit.Email;
        ((Account)account).HashedPassword = accountBeforeEdit.HashedPassword;
        ((Account)account).Roles = accountBeforeEdit.Roles;
    }

    private bool FilterFunc(Account account)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (account.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (account.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{account.Roles}".Contains(searchString))
            return true;
        return false;
    }
}